
# telegram_gemini_bot.py
import asyncio
import httpx
import os
import logging
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ü–∞–º—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ, –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏)
user_histories = {}
MAX_HISTORY_LENGTH = 10

GEMINI_API_ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={GEMINI_API_KEY}"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

async def get_gemini_response(history: list) -> str:
    if not GEMINI_API_KEY:
        logger.error("–ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –ö–ª—é—á Gemini API –Ω–µ –Ω–∞–π–¥–µ–Ω."

    headers = {"Content-Type": "application/json"}
    payload = {
        "contents": [{
            "parts": [{"text": msg} for msg in history]
        }]
    }

    try:
        async with httpx.AsyncClient(timeout=40.0) as client:
            response = await client.post(GEMINI_API_ENDPOINT, headers=headers, json=payload)
            response.raise_for_status()
            data = response.json()

            if "candidates" in data and data["candidates"] and                "content" in data["candidates"][0] and                "parts" in data["candidates"][0]["content"] and                data["candidates"][0]["content"]["parts"]:
                return data["candidates"][0]["content"]["parts"][0]["text"]
            elif "error" in data:
                logger.error(f"Gemini API Error: {data['error']}")
                return f"–û—à–∏–±–∫–∞ –æ—Ç Gemini API: {data['error'].get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            else:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {data}")
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini."

    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini: {e.response.status_code} - {e.response.text}")
        return f"–û—à–∏–±–∫–∞ API ({e.response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {e}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_name = update.effective_user.first_name
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–≤–æ–π –±–æ—Ç —Å Gemini AI. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    if not user_message:
        return

    chat_id = str(update.effective_chat.id)
    user_name = update.effective_user.first_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {chat_id}): '{user_message}'")

    thinking_message = await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...")

    if chat_id not in user_histories:
        user_histories[chat_id] = []

    user_histories[chat_id].append(user_message)
    user_histories[chat_id] = user_histories[chat_id][-MAX_HISTORY_LENGTH:]

    gemini_reply = await get_gemini_response(user_histories[chat_id])

    user_histories[chat_id].append(gemini_reply)
    user_histories[chat_id] = user_histories[chat_id][-MAX_HISTORY_LENGTH:]

    if thinking_message:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=thinking_message.message_id,
            text=gemini_reply,
        parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(gemini_reply)

def main() -> None:
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
        return
    if not GEMINI_API_KEY:
        logger.warning("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–ª—é—á Gemini API –Ω–µ –Ω–∞–π–¥–µ–Ω! –û—Ç–≤–µ—Ç—ã –æ—Ç Gemini –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == "__main__":
    main()
